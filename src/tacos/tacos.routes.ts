import { Router } from "express"

import * as tacosController from './tacos.controller'
import * as tacosSchemas from "./tacos.schemas"
import { validate } from "../middlewares/validation"

const router = Router()

/**
 * @swagger
 * tags:
 *  name: Tacos
 * components:
 *  parameters:
 *    TacoId:
 *      in: path
 *      name: id
 *      description: the id of the taco
 *      required: true
 *      schema:
 *        type: number
 *  schemas:
 *    Taco:
 *      type: object
 *      properties:
 *        id:
 *          type: number
 *          description: autogenerated numeric identifier
 *        name:
 *          type: string
 *          description: the display name of the taco
 *        price:
 *          type: number
 *          description: how much to pay for the taco (MXN only)
 *      required:
 *        - id
 *        - name
 *        - price
 *      example:
 *        id: 1
 *        name: Taco al pastor
 *        price: 15
 *    CreateTaco:
 *      type: object
 *      properties:
 *        name:
 *          type: string
 *          description: the display name of the taco
 *        price:
 *          type: number
 *          description: how much to pay for the taco (MXN only)
 *      required:
 *        - name
 *        - price
 *      example:
 *        name: Taco al pastor
 *        price: 15
 *    UpdateTaco:
 *      type: object
 *      properties:
 *        name:
 *          type: string
 *          description: the display name of the taco
 *        price:
 *          type: number
 *          description: how much to pay for the taco (MXN only)
 *      example:
 *        price: 20
 *    TacoNotFound:
 *      type: object
 *      properties:
 *        message:
 *          type: string
 *      example:
 *        message: Taco 182 not found
 *    ValidationError:
 *      type: object
 *      properties:
 *        message:
 *          type: string
 *      example:
 *        message: the price must be a number
 */

/**
 * @swagger
 * /tacos:
 *  get:
 *    tags: [Tacos]
 *    summary: Returns all of the available tacos in the menu
 *    responses:
 *      200:
 *        description: Success! Get the complete menu
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Taco'
 */
router.get('/', tacosController.getAll)

/**
 * @swagger
 * /tacos/{id}:
 *  get:
 *    tags: [Tacos]
 *    summary: Returns a specific taco information
 *    parameters:
 *      - $ref: '#/components/parameters/TacoId'
 *    responses:
 *      200:
 *        description: Success! Get the specific taco
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Taco'
 *      400:
 *        description: The id is not valid
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/ValidationError'  
 *      404:
 *        description: The taco was not found
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/TacoNotFound'
 */
router.get('/:id', validate(tacosSchemas.getOne), tacosController.getOne)

/**
 * @swagger
 * tags:
 *  name: Tacos
 */

/**
 * @swagger
 * /tacos:
 *  post:
 *    tags: [Tacos]
 *    summary: Creates a new taco in the menu
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/CreateTaco'
 *    responses:
 *      200:
 *        description: Success! The taco was added to the menu
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Taco'
 *      400:
 *        description: The request body is not valid
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/ValidationError' 
 */
router.post('/', validate(tacosSchemas.create), tacosController.create)

/**
 * @swagger
 * /tacos/{id}:
 *  put:
 *    tags: [Tacos]
 *    summary: Updates a specific taco information
 *    parameters:
 *      - $ref: '#/components/parameters/TacoId'
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/UpdateTaco'
 *    responses:
 *      200:
 *        description: Success! Taco updated!
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Taco'
 *      400:
 *        description: The id or the request body are not valid
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/ValidationError' 
 *      404:
 *        description: The taco was not found
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/TacoNotFound'
 */
router.put('/:id', validate(tacosSchemas.update), tacosController.update)

/**
 * @swagger
 * /tacos/{id}:
 *  delete:
 *    tags: [Tacos]
 *    summary: Removes a taco from the menu
 *    parameters:
 *      - $ref: '#/components/parameters/TacoId'
 *    responses:
 *      200:
 *        description: Success! The taco was removed
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Taco'
 *      400:
 *        description: The id is not valid
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/ValidationError' 
 *      404:
 *        description: The taco was not found
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/TacoNotFound'
 */
router.delete('/:id', validate(tacosSchemas.remove), tacosController.remove)

export default router
